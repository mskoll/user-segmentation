// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	entity "userSegmentation/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// AddDeleteSegment mocks base method.
func (m *MockUser) AddDeleteSegment(segments entity.AddDelSegments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeleteSegment", segments)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDeleteSegment indicates an expected call of AddDeleteSegment.
func (mr *MockUserMockRecorder) AddDeleteSegment(segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeleteSegment", reflect.TypeOf((*MockUser)(nil).AddDeleteSegment), segments)
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(user entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), user)
}

// Operations mocks base method.
func (m *MockUser) Operations(userOperations entity.UserOperations) ([]entity.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operations", userOperations)
	ret0, _ := ret[0].([]entity.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Operations indicates an expected call of Operations.
func (mr *MockUserMockRecorder) Operations(userOperations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operations", reflect.TypeOf((*MockUser)(nil).Operations), userOperations)
}

// UserById mocks base method.
func (m *MockUser) UserById(id int) (entity.SegmentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserById", id)
	ret0, _ := ret[0].(entity.SegmentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserById indicates an expected call of UserById.
func (mr *MockUserMockRecorder) UserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserById", reflect.TypeOf((*MockUser)(nil).UserById), id)
}

// MockSegment is a mock of Segment interface.
type MockSegment struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentMockRecorder
}

// MockSegmentMockRecorder is the mock recorder for MockSegment.
type MockSegmentMockRecorder struct {
	mock *MockSegment
}

// NewMockSegment creates a new mock instance.
func NewMockSegment(ctrl *gomock.Controller) *MockSegment {
	mock := &MockSegment{ctrl: ctrl}
	mock.recorder = &MockSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegment) EXPECT() *MockSegmentMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockSegment) CreateSegment(segment entity.Segment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", segment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentMockRecorder) CreateSegment(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegment)(nil).CreateSegment), segment)
}

// DeleteSegment mocks base method.
func (m *MockSegment) DeleteSegment(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentMockRecorder) DeleteSegment(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegment)(nil).DeleteSegment), name)
}
